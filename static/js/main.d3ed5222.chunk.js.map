{"version":3,"sources":["logo.svg","components/navbar/navbar.js","components/home/home.js","components/team/teamMember.js","components/team/teamPage.js","components/footer/footer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","NavBar","props","className","to","HomePage","TeamMember","select","i","person","teams","length","filter","blur","name","TeamPage","useState","teamMembers","setTeamMembers","setFilter","data","require","useEffect","onClick","map","key","id","Footer","App","path","exact","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mLAAAA,EAAOC,QAAU,IAA0B,kC,kxICgB5BC,G,MATA,SAAAC,GACd,OACC,yBAAKC,UAAU,qBACd,kBAAC,IAAD,CAAMA,UAAU,UAAUC,GAAG,KAA7B,QACA,kBAAC,IAAD,CAAMD,UAAU,UAAUC,GAAG,UAA7B,YCFYC,G,MANE,SAAAH,GACf,OACE,uC,QCuBWI,G,MAvBI,SAAAJ,GAGf,IADA,IAAIK,GAAS,EACJC,EAAI,EAAGA,EAAIN,EAAMO,OAAOC,MAAMC,OAAQH,IACvCN,EAAMU,QAAUV,EAAMO,OAAOC,MAAMF,KACnCD,GAAS,GAIjB,IAAIM,EAAO,0CAKX,OAJIN,IACAM,EAAO,mCAGJ,oCACH,yBAAKV,UAAU,UACX,6BAASA,UAAU,UAClBU,EACD,6BAASV,UAAU,eAAeD,EAAMO,OAAOK,UCgE5CC,EAhFE,SAAAb,GAAU,IAAD,EACgBc,mBAAS,IADzB,mBACfC,EADe,KACFC,EADE,OAEMF,mBAAS,OAFf,mBAEfJ,EAFe,KAEPO,EAFO,KAGlBC,EAAOC,EAAQ,IAqBnB,OALAC,qBAAU,WAENJ,EAAeE,KACd,IAEE,oCACH,wBAAIjB,UAAU,UAAd,iBACA,8BACI,yBAAKA,UAAU,SACX,6BAASA,UAAU,UACf,4BAAQoB,QAAS,kBAAMJ,EAAU,aAAjC,YAIJ,6BAAShB,UAAU,UAAnB,OAGA,6BAASA,UAAU,UACf,4BAAQoB,QAAS,kBAAMJ,EAAU,cAAjC,aAIJ,6BAAShB,UAAU,UAAnB,kBAGA,6BAASA,UAAU,UAAnB,UAGA,6BAASA,UAAU,UAAnB,UAGA,6BAASA,UAAU,UAAnB,cAGA,6BAASA,UAAU,UAAnB,YAGA,6BAASA,UAAU,UAAnB,MAGA,6BAASA,UAAU,UAAnB,cAGA,6BAASA,UAAU,UAAnB,UAGA,6BAASA,UAAU,UACf,4BAAQoB,QAAS,kBAAMJ,EAAU,mBAAjC,qBAKR,yBAAKhB,UAAU,gBACVc,EAAYO,KAAI,SAAAf,GACb,OAAO,kBAAC,EAAD,CAAYgB,IAAKhB,EAAOiB,GAAIjB,OAAQA,EAAQG,OAAQA,WCvEhEe,G,MANA,SAAAzB,GACb,OACE,uCC8CW0B,MAjCf,WACE,OACE,kBAAC,IAAD,KACE,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,IAAIC,OAAK,GAAC,kBAAC,EAAD,OACtB,kBAAC,IAAD,CAAOD,KAAK,SAASC,OAAK,GAAC,kBAAC,EAAD,QAE7B,kBAAC,EAAD,QCdcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.d3ed5222.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, {useState, useEffect} from 'react';\nimport './navbar.css';\n\nimport { Link } from 'react-router-dom';\n\nconst tabs = ['Project', 'About', 'Get Involved'];\n\nconst NavBar = props => {\n\treturn (\n\t\t<div className='nav-bar-container'>\n\t\t\t<Link className='nav-tab' to='/'>Home</Link>\n\t\t\t<Link className='nav-tab' to='/about'>about</Link>\n\t\t</div>\n\t)\n}\n\nexport default NavBar;","import React, {useState, useEffect} from 'react';\r\nimport './home.css';\r\n\r\nconst HomePage = props => {\r\n  return (\r\n    <></>\r\n  )\r\n}\r\n\r\nexport default HomePage;","import React, {useState} from 'react';\n\n/**\n * @returns {React.Component}\n */\nconst TeamMember = props => {\n\n    let select = false;\n    for (let i = 0; i < props.person.teams.length; i++) {\n        if (props.filter == props.person.teams[i]) {\n            select = true;\n        }\n    }\n\n    let blur = <section>blur!</section>\n    if (select) {\n        blur = <section></section>\n    }\n\n    return <>\n        <div className=\"person\">\n            <section className=\"image\"></section>\n            {blur}\n            <section className=\"person-name\">{props.person.name}</section>\n        </div>\n    </>;\n}\n\nexport default TeamMember;","import './teamPage.css';\nimport TeamMember from './teamMember';\nimport React, {useState, useEffect} from 'react';\n\n/**\n * @returns {React.Component}\n */\nconst TeamPage = props => {\n    const [teamMembers, setTeamMembers] = useState([]);\n    const [filter, setFilter] = useState('All');\n    let data = require('./team_members.json');\n    \n    \n    // const fetchData = () => {\n    //     fetch('https://jsonplaceholder.typicode.com/posts')\n    //       .then(response => {\n    //         return response.json();\n    //       })\n    //       .then(people => {\n    //         setLoadedPeople(people);\n    //       })\n    //       .catch(err => {\n    //         console.log(err);\n    //       });\n    // };\n\n    useEffect(() => {\n        //fetchData();\n        setTeamMembers(data);\n      }, []);\n\n    return <>\n        <h1 className=\"header\">Meet the Team</h1>\n        <body>\n            <div className=\"teams\">\n                <seciton className=\"col-xs\">\n                    <button onClick={() => setFilter('Adviser')}>\n                        Adviser\n                    </button>\n                </seciton>\n                <seciton className=\"col-xs\">\n                    All\n                </seciton>\n                <seciton className=\"col-xs\">\n                    <button onClick={() => setFilter('Business')}>\n                        Business\n                    </button>\n                </seciton>\n                <seciton className=\"col-xs\">\n                    Collaborations\n                </seciton>\n                <seciton className=\"col-xs\">\n                    Design\n                </seciton>\n                <seciton className=\"col-xs\">\n                    Drylab\n                </seciton>\n                <seciton className=\"col-xs\">\n                    Leadership\n                </seciton>\n                <seciton className=\"col-xs\">\n                    Outreach\n                </seciton>\n                <seciton className=\"col-xs\">\n                    PI\n                </seciton>\n                <seciton className=\"col-xs\">\n                    Presenters\n                </seciton>\n                <seciton className=\"col-xs\">\n                    Wetlab\n                </seciton>\n                <seciton className=\"col-xs\">\n                    <button onClick={() => setFilter('Web Developer')}>\n                        Web Development\n                    </button>\n                </seciton>\n            </div>\n            <div className=\"team-members\">\n                {teamMembers.map(person => {\n                    return <TeamMember key={person.id} person={person} filter={filter}/>;\n                })}\n            </div>\n        </body>\n    </>;\n}\n\nexport default TeamPage;","import React, {useState, useEffect} from 'react';\r\nimport './footer.css';\r\n\r\nconst Footer = props => {\r\n  return (\r\n    <></>\r\n  )\r\n}\r\n\r\nexport default Footer;","import React, {useState, useEffect} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport {\n  Route,\n  Link,\n  Switch,\n  Redirect,\n  BrowserRouter\n} from 'react-router-dom';\n\nimport NavBar from './components/navbar/navbar';\nimport HomePage from './components/home/home';\nimport TeamPage from './components/team/teamPage';\nimport Footer from './components/footer/footer';\n\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <NavBar />\n      <Switch>\n        <Route path='/' exact><HomePage /></Route>\n        <Route path='/about' exact><TeamPage /></Route>\n      </Switch>\n      <Footer />\n    </BrowserRouter>\n    \n    /*\n    <div className=\"App\">\n      \n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n    */\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}